{"name": "Mini Project# 3", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=127.0.6533.120)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F6B29642+30946]\n\t(No symbol) [0x00007FF6F6ADE3D9]\n\t(No symbol) [0x00007FF6F69D6FDA]\n\t(No symbol) [0x00007FF6F69ACB85]\n\t(No symbol) [0x00007FF6F6A537A7]\n\t(No symbol) [0x00007FF6F6A6A771]\n\t(No symbol) [0x00007FF6F6A4C813]\n\t(No symbol) [0x00007FF6F6A1A6E5]\n\t(No symbol) [0x00007FF6F6A1B021]\n\tGetHandleVerifier [0x00007FF6F6C5F84D+1301229]\n\tGetHandleVerifier [0x00007FF6F6C6BDC7+1351783]\n\tGetHandleVerifier [0x00007FF6F6C62A13+1313971]\n\tGetHandleVerifier [0x00007FF6F6B5DD16+245686]\n\t(No symbol) [0x00007FF6F6AE759F]\n\t(No symbol) [0x00007FF6F6AE3814]\n\t(No symbol) [0x00007FF6F6AE39A2]\n\t(No symbol) [0x00007FF6F6ADA3FF]\n\tBaseThreadInitThunk [0x00007FFAB711257D+29]\n\tRtlUserThreadStart [0x00007FFAB7C8AF28+40]", "trace": "@allure.title(\"Mini Project# 3\")\n    @allure.description(\"Verify that if user validity is expired and needs to upgrade\")\n    @pytest.mark.Mini_Project\n    def test_mini_project3():\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get('https://www.idrive360.com/enterprise/login')\n        email = driver.find_element(By.ID,'username')\n        email.send_keys(\"augtest_040823@idrive.com\")\n        pw = driver.find_element(By.ID,'password')\n        pw.send_keys(\"123456\")\n        btn = driver.find_element(By.ID,'frm-btn')\n        btn.click()\n    \n        time.sleep(20)\n    \n>       assert driver.current_url == \"https://www.idrive360.com/enterprise/account?upgradenow=true\"\n\n12082014\\Test_007.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029ED909FC10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF6F6ADA3FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAB711257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAB7C8AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=127.0.6533.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F6B29642+30946]\nE       \t(No symbol) [0x00007FF6F6ADE3D9]\nE       \t(No symbol) [0x00007FF6F69D6FDA]\nE       \t(No symbol) [0x00007FF6F69ACB85]\nE       \t(No symbol) [0x00007FF6F6A537A7]\nE       \t(No symbol) [0x00007FF6F6A6A771]\nE       \t(No symbol) [0x00007FF6F6A4C813]\nE       \t(No symbol) [0x00007FF6F6A1A6E5]\nE       \t(No symbol) [0x00007FF6F6A1B021]\nE       \tGetHandleVerifier [0x00007FF6F6C5F84D+1301229]\nE       \tGetHandleVerifier [0x00007FF6F6C6BDC7+1351783]\nE       \tGetHandleVerifier [0x00007FF6F6C62A13+1313971]\nE       \tGetHandleVerifier [0x00007FF6F6B5DD16+245686]\nE       \t(No symbol) [0x00007FF6F6AE759F]\nE       \t(No symbol) [0x00007FF6F6AE3814]\nE       \t(No symbol) [0x00007FF6F6AE39A2]\nE       \t(No symbol) [0x00007FF6F6ADA3FF]\nE       \tBaseThreadInitThunk [0x00007FFAB711257D+29]\nE       \tRtlUserThreadStart [0x00007FFAB7C8AF28+40]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "Verify that if user validity is expired and needs to upgrade", "start": 1723793543046, "stop": 1723793569945, "uuid": "8fdbd5b9-cf2e-43b2-a47e-4b82c91f0cb3", "historyId": "b18ef9c0d9c893cf73e07a3ee25e7a60", "testCaseId": "b18ef9c0d9c893cf73e07a3ee25e7a60", "fullName": "PycharmProjects.Auto-Selenium.12082014.Test_007#test_mini_project3", "labels": [{"name": "tag", "value": "Mini_Project"}, {"name": "parentSuite", "value": "PycharmProjects.Auto-Selenium.12082014"}, {"name": "suite", "value": "Test_007"}, {"name": "host", "value": "DESKTOP-TL5SF5L"}, {"name": "thread", "value": "17856-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PycharmProjects.Auto-Selenium.12082014.Test_007"}]}